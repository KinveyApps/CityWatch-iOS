//
//  AppDelegate.m
//  Potholes
//
//  Created by Mark Daigneault on 1/17/12.
//  Copyright (c) 2012 Intrepid Pursuits. All rights reserved.
//

#import "AppDelegate.h"
#import "ReportModel.h"
#import "ReportService.h"
#import <KinveyKit/KinveyKit.h>

@implementation AppDelegate

@synthesize window = _window;
@synthesize locationManager;

- (CLLocationManager *)locationManager {
    if (!locationManager) {
        locationManager = [[CLLocationManager alloc] init];
        locationManager.delegate = self;
        locationManager.desiredAccuracy = kCLLocationAccuracyBest;
    }
    return locationManager;
}

- (void)attemptToConfirmKinveyConnection {
    [KCSPing pingKinveyWithBlock:^(KCSPingResult *result) {
        NSString *title;
        
        if (result.pingWasSuccessful){
            title = [NSString stringWithString:@"Kinvey Ping Success :)"];
        } else {
            title = [NSString stringWithString:@"Kinvey Ping Failed :("];
        }
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle: title
                                                        message: [result description]
                                                       delegate: nil
                                              cancelButtonTitle: @"OK"
                                              otherButtonTitles: nil];
        [alert show];
    }];
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions 
{
    [TestFlight takeOff:@"cfae31ef9a5409a8a47086997ecc592a_NjQ5MDMyMDEyLTAyLTIyIDEzOjIxOjM1LjAxODA4MA"];
    
    // Override point for customization after application launch.
    KCSClient* client = [[KCSClient sharedClient] initializeKinveyServiceForAppKey: (NSString *)KINVEY_APPLICATION_KEY withAppSecret: (NSString *)KINVEY_SECERT_APP_KEY usingOptions: (NSDictionary *)nil];

    NSLog(@"Client initiated: %@", client);
    //[[ReportService sharedInstance] pullReports];
    //[[ReportService sharedInstance] readReportsFromDisk];
    //[[ReportService sharedInstance] pushReports];
    //setReportModelCollection([client collectionFromString:@"ReportEntity" withClass:[ReportModel class]]);
    
    //[self attemptToConfirmKinveyConnection];
    
    // Get current version ("Bundle Version") from the default Info.plist file
    NSString *currentVersion = (NSString*)[[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleVersion"];
    if (![[ApplicationSettings sharedSettings] previousStartupVersions]) {
        // Starting up for first time with NO pre-existing installs (e.g., fresh 
        // install of some version)
        [[ApplicationSettings sharedSettings] setPreviousStartupVersions:[NSArray arrayWithObject:currentVersion]];
        [[ApplicationSettings sharedSettings] setPresentNewReportOnStartup:YES];
    }
    else {
        if (![[[ApplicationSettings sharedSettings] previousStartupVersions] containsObject:currentVersion]) {
            // Starting up for first time with this version of the app. This
            // means a different version of the app was alread installed once 
            // and started.
            NSMutableArray *updatedPreviousStartVersions = [NSMutableArray arrayWithArray:[[ApplicationSettings sharedSettings] previousStartupVersions]];
            [updatedPreviousStartVersions addObject:currentVersion];
            [[ApplicationSettings sharedSettings] setPreviousStartupVersions:updatedPreviousStartVersions];
        }
    }
    
    [[ReportService sharedInstance] readReportsFromDisk];
    
    [self.locationManager startUpdatingLocation];

    // Save changes to disk
    [[ApplicationSettings sharedSettings] synchronize];
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application
{
    /*
     Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
     Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
     */
    [self.locationManager stopUpdatingLocation];
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    /*
     Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
     If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
     */
    [self.locationManager stopUpdatingLocation];
    [[ReportService sharedInstance] saveReportsToDisk];
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    /*
     Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
     */
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    /*
     Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
     */
    [self.locationManager startUpdatingLocation];
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    /*
     Called when the application is about to terminate.
     Save data if appropriate.
     See also applicationDidEnterBackground:.
     */
    [self.locationManager stopUpdatingLocation];
}

#pragma mark - CLLocationManagerDelegate

- (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation {
    [[ApplicationSettings sharedSettings] setCurrentUserCoordinates:
     [NSArray arrayWithObjects:
      [NSNumber numberWithFloat:newLocation.coordinate.latitude],
      [NSNumber numberWithFloat:newLocation.coordinate.longitude], nil]];
}



@end
