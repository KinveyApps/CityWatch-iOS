//
//  ImageScrollViewController.m
//  Potholes
//
//  Created by Mark Daigneault on 3/30/12.
//  Copyright (c) 2012 Intrepid Pursuits. All rights reserved.
//

#import "ImageScrollViewController.h"

@implementation ImageScrollViewController

@synthesize mainScrollView;
@synthesize reportImageView;
@synthesize report;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewWillAppear:(BOOL)animated {
    self.navigationController.navigationBarHidden = NO;
    [self.navigationController.navigationBar setBarStyle:UIBarStyleBlackTranslucent];
}

- (void)viewWillDisappear:(BOOL)animated {
    self.navigationController.navigationBar.alpha = 1;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view.
    mainScrollView.contentSize = reportImageView.frame.size;
    mainScrollView.maximumZoomScale = 4.0;
	mainScrollView.minimumZoomScale = 1.0;
	mainScrollView.clipsToBounds = YES;
	mainScrollView.delegate = self;
    
    reportImageView.image = [UIImage imageWithContentsOfFile:self.report.imagePath];
    reportImageView.center = CGPointMake(reportImageView.center.x, reportImageView.center.y - mainScrollView.frame.origin.y/2);
    
    UITapGestureRecognizer *doubleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(doubleTapGestureHandler:)];
    doubleTap.numberOfTapsRequired = 2;
    [mainScrollView addGestureRecognizer:doubleTap];
    
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapGestureHandler:)];
    [tap requireGestureRecognizerToFail:doubleTap];
    [mainScrollView addGestureRecognizer:tap];
}

- (void)viewDidUnload
{
    [self setMainScrollView:nil];
    [self setReportImageView:nil];
    [super viewDidUnload];
    // Release any retained subviews of the main view.
}
- (void)scrollViewDidZoom:(UIScrollView *)scrollView {
//    if (scrollView.zoomScale > 1.0) {
//        reportImageView.center = CGPointMake(scrollView.center.x, reportImageView.center.y);
//    }
}

- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(UIView *)view atScale:(float)scale {
//    UIEdgeInsets insets = scrollView.contentInset;
//    scrollView.contentInset = insets;
}

- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView {
    return reportImageView;
}

- (CGRect)zoomRectForScale:(float)scale atCenter:(CGPoint)center {
    CGRect baseRect = mainScrollView.frame;
    baseRect.size.width /= scale;
    baseRect.size.height /= scale;
    baseRect.origin.x = center.x - baseRect.size.width/2;
    baseRect.origin.y = center.y - baseRect.size.height/2;
    return baseRect;
}

#pragma mark - gesture handlers

- (void)doubleTapGestureHandler:(UITapGestureRecognizer *)recognizer {
    // tap to zoom
    float scale = mainScrollView.zoomScale;
    
    if (scale > mainScrollView.minimumZoomScale) {
        [mainScrollView setZoomScale:mainScrollView.minimumZoomScale animated:YES];        
    }
    else {
//        [mainScrollView setZoomScale:mainScrollView.maximumZoomScale animated:YES];        
        [mainScrollView zoomToRect:[self zoomRectForScale:mainScrollView.maximumZoomScale atCenter:[recognizer locationInView:mainScrollView]] animated:YES];
    }
}

- (void)tapGestureHandler:(UITapGestureRecognizer *)recognizer {
    [[UIApplication sharedApplication] setStatusBarHidden:![[UIApplication sharedApplication] isStatusBarHidden] withAnimation:UIStatusBarAnimationFade];
    
    BOOL navBarHidden = self.navigationController.navigationBarHidden;
    // if nav bar is hidden, unhide it before animation, since alpha is already 0
    if (navBarHidden) {
        [self.navigationController setNavigationBarHidden:NO animated:NO];
        mainScrollView.frame = CGRectOffset(mainScrollView.frame, 0, -10);
    }
    
    [UIView animateWithDuration:0.5 
                     animations:^{
                         float alpha = self.navigationController.navigationBar.alpha;
                         self.navigationController.navigationBar.alpha = (alpha == 0) ? 1 : 0;
                     }
                     completion:^(BOOL finished) {
                         // if nav bar is hidden, unhide it before animation, since alpha is already 0
                         if (!navBarHidden) {
                             [self.navigationController setNavigationBarHidden:YES animated:NO];
                             mainScrollView.frame = CGRectOffset(mainScrollView.frame, 0, 10);
                         }
                     }
     ];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait ||
            UIInterfaceOrientationIsLandscape(interfaceOrientation));
}

@end
